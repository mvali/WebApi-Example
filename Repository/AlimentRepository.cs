using Entities.Contracts;
using Entities.Models;
using Repository.DbData;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Repository
{
    public class AlimentRepository : IAlimentRepository
    {
        //for getting db connection via dependendecy injection
        private readonly SqlContext _context; // autogenerated: press "."  on _context: .generate readonly field
        public AlimentRepository(SqlContext context)
        {
            // generate readonly field
            _context = context;
        }
        public bool AlimentMethod(int id, IAliment cmd)
        {
            return cmd != null && id > 0;
        }

        public void CreateAliment(IAliment cmd)
        {
            if (cmd == null)
                throw new ArgumentNullException(nameof(cmd));

            // command is created but data will be saved when SaveChanges is also called
            _context.Aliments.Add((Aliment)cmd);
        }

        public void DeleteAliment(IAliment cmd)
        {
            if (cmd == null)
                throw new NotImplementedException();
            _context.Aliments.Remove((Aliment)cmd);
        }

        public IEnumerable<IAliment> GetAllAliments()
        {
            return _context.Aliments.ToList();
        }

        public IAliment GetAlimentById(int id)
        {
            return _context.Aliments.FirstOrDefault(x => x.Id == id);
        }

        public bool SaveChanges()
        {
            // tell if changes in database where successfully saved
            return (_context.SaveChanges() >= 0);
        }

        public void UpdateAliment(IAliment cmd)
        {
            // nohing to do here for now, actions made by SaveChanges
            //throw new System.NotImplementedException();
        }
    }
}
